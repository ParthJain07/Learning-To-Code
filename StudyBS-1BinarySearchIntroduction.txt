Use of sorted unique array(no duplicate) 
use of low, mid and hight
Itrative Code
    funtion(arr, n, target){
        low=0; high=n-1;
        while(low <= high){
            mid=(low+high)/2
            if(arr[mid] == target) return true;
            else if (target > arr[mid]) low=mid+1;
            else high=mid-1
        }
        return false;
    }

Recursive
    funtion(arr, low, high, target){
        if(low > high)return -1;
        mid=(low+high)/2
        if(arr[mid] == target){
            return mid;
        } 
        else if(target > arr[mid]){
            return funtion(arr, mid+1; high, target)
        }

    }

Time complexity
->log n
->Resolve Overflow issue
    ->mid = low + (high-low)/2
    ->use of long long int